name: Test, Build and Deploy Docker app to Lightsail

on: [push, pull_request]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MIX_ENV: test
  SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  AWS_LIGHTSAIL_SERVICE_NAME: ${{ secrets.AWS_LIGHTSAIL_SERVICE_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: novy_db_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: "1.11.4" # Define the elixir version [required]
          otp-version: "23.1" # Define the OTP version [required]
          experimental-otp: true

      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: MIX_ENV=test mix deps.get

      - name: Run tests
        run: MIX_ENV=test mix coveralls.github --umbrella

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: test
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Install AWS Client
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.AWS_LIGHTSAIL_SERVICE_NAME }}:release .

      - name: Push Docker Image on Lightsail
        run: |
          aws lightsail push-container-image \
            --region $AWS_REGION \
            --service-name $AWS_LIGHTSAIL_SERVICE_NAME \
            --label $AWS_LIGHTSAIL_SERVICE_NAME \
            --image $AWS_LIGHTSAIL_SERVICE_NAME:release

      - name: Deploy on container Lightsail
        run: |
          aws lightsail get-container-images --service-name $AWS_LIGHTSAIL_SERVICE_NAME | jq --raw-output ".containerImages[0].image" > image.txt

          jq --arg image $(cat image.txt) \
            --arg serviceName $AWS_LIGHTSAIL_SERVICE_NAME \
            --arg containerName $AWS_LIGHTSAIL_SERVICE_NAME \
            --arg secretKeyBase $SECRET_KEY_BASE \
            --arg databaseUrl $DATABASE_URL \
            '.serviceName = $serviceName | .publicEndpoint.containerName = $containerName | .containers.app.image = $image | (.containers.app.environment |= ( .SECRET_KEY_BASE = $secretKeyBase | .DATABASE_URL = $databaseUrl )) | .containers[$containerName] = .containers.app | del(.containers.app)' \
            container.template.json > container.json

          aws lightsail create-container-service-deployment --cli-input-json file://$(pwd)/container.json
